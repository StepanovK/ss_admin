version: "3.9"

volumes:
  pgdata_volume:
  pgadmin_volume:
#  rabbit_mq_volume:
#    driver: rexray
#    driver_opts:
#      volumeType: "gp2"
#      size: "4"
#      availabilityZone: "ap-south-1a"
  logs_volume:

networks:
  vk_admin:
    driver: bridge

services:
  postgres_ru:
    build:
      context: .
      dockerfile: Models/Dockerfile
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    restart: always
    volumes:
      - pgdata_volume:/var/lib/postgresql/data
    networks:
      - vk_admin
    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4:6.10
    volumes:
      - pgadmin_volume:/var/lib/pgadmin
    ports:
      - ${PGADMIN_PORT:-5050}:80
    restart: unless-stopped
    networks:
      - vk_admin
    depends_on:
      - postgres_ru
    env_file:
      - .env

  rabbitmq:
    container_name: rabbitmq
    hostname: rabbitmq
    image: rabbitmq:3.10-management-alpine
    restart: always
    environment:
      - RABBITMQ_NODENAME=node@rabbitmq
    ports:
      - "5672:5672"
      - ${RABBITMQ_ADMIN_PORT:-8080}:15672
    networks:
      - vk_admin
#    volumes:
#      - rabbit_mq_volume:/var/lib/rabbitmq/mnesia/node@rabbitmq

  bot_poster:
    build:
      context: .
      dockerfile: BotVKPoster/Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Moscow
    volumes:
      - logs_volume:/Logs
    depends_on:
      - rabbitmq
      - postgres_ru
    networks:
      - vk_admin
    env_file:
      - .env


  bot_listener:
    build:
      context: .
      dockerfile: BotVKListener/Dockerfile
    restart: unless-stopped
    environment:
      - TZ=Europe/Moscow
    volumes:
      - logs_volume:/Logs
    depends_on:
      - rabbitmq
      - postgres_ru
    networks:
      - vk_admin
    env_file:
      - .env